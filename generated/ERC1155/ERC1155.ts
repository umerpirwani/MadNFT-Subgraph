// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class BaseUriChanged extends ethereum.Event {
  get params(): BaseUriChanged__Params {
    return new BaseUriChanged__Params(this);
  }
}

export class BaseUriChanged__Params {
  _event: BaseUriChanged;

  constructor(event: BaseUriChanged) {
    this._event = event;
  }

  get newBaseURI(): string {
    return this._event.parameters[0].value.toString();
  }
}

export class BurnLazy extends ethereum.Event {
  get params(): BurnLazy__Params {
    return new BurnLazy__Params(this);
  }
}

export class BurnLazy__Params {
  _event: BurnLazy;

  constructor(event: BurnLazy) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class BurnLazyBatch extends ethereum.Event {
  get params(): BurnLazyBatch__Params {
    return new BurnLazyBatch__Params(this);
  }
}

export class BurnLazyBatch__Params {
  _event: BurnLazyBatch;

  constructor(event: BurnLazyBatch) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }
}

export class CreateERC1155MadNft extends ethereum.Event {
  get params(): CreateERC1155MadNft__Params {
    return new CreateERC1155MadNft__Params(this);
  }
}

export class CreateERC1155MadNft__Params {
  _event: CreateERC1155MadNft;

  constructor(event: CreateERC1155MadNft) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get name(): string {
    return this._event.parameters[1].value.toString();
  }

  get symbol(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class CreateERC1155MadNftUser extends ethereum.Event {
  get params(): CreateERC1155MadNftUser__Params {
    return new CreateERC1155MadNftUser__Params(this);
  }
}

export class CreateERC1155MadNftUser__Params {
  _event: CreateERC1155MadNftUser;

  constructor(event: CreateERC1155MadNftUser) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get name(): string {
    return this._event.parameters[1].value.toString();
  }

  get symbol(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class Creators extends ethereum.Event {
  get params(): Creators__Params {
    return new Creators__Params(this);
  }
}

export class Creators__Params {
  _event: Creators;

  constructor(event: Creators) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get creators(): Array<CreatorsCreatorsStruct> {
    return this._event.parameters[1].value.toTupleArray<
      CreatorsCreatorsStruct
    >();
  }
}

export class CreatorsCreatorsStruct extends ethereum.Tuple {
  get account(): Address {
    return this[0].toAddress();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }
}

export class DefaultApproval extends ethereum.Event {
  get params(): DefaultApproval__Params {
    return new DefaultApproval__Params(this);
  }
}

export class DefaultApproval__Params {
  _event: DefaultApproval;

  constructor(event: DefaultApproval) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get hasApproval(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SecondarySaleFees extends ethereum.Event {
  get params(): SecondarySaleFees__Params {
    return new SecondarySaleFees__Params(this);
  }
}

export class SecondarySaleFees__Params {
  _event: SecondarySaleFees;

  constructor(event: SecondarySaleFees) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get recipients(): Array<Address> {
    return this._event.parameters[1].value.toAddressArray();
  }

  get bps(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }
}

export class Supply extends ethereum.Event {
  get params(): Supply__Params {
    return new Supply__Params(this);
  }
}

export class Supply__Params {
  _event: Supply;

  constructor(event: Supply) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class TransferBatch extends ethereum.Event {
  get params(): TransferBatch__Params {
    return new TransferBatch__Params(this);
  }
}

export class TransferBatch__Params {
  _event: TransferBatch;

  constructor(event: TransferBatch) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get values(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class TransferSingle extends ethereum.Event {
  get params(): TransferSingle__Params {
    return new TransferSingle__Params(this);
  }
}

export class TransferSingle__Params {
  _event: TransferSingle;

  constructor(event: TransferSingle) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class URI extends ethereum.Event {
  get params(): URI__Params {
    return new URI__Params(this);
  }
}

export class URI__Params {
  _event: URI;

  constructor(event: URI) {
    this._event = event;
  }

  get value(): string {
    return this._event.parameters[0].value.toString();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class WhitelistStatusChanged extends ethereum.Event {
  get params(): WhitelistStatusChanged__Params {
    return new WhitelistStatusChanged__Params(this);
  }
}

export class WhitelistStatusChanged__Params {
  _event: WhitelistStatusChanged;

  constructor(event: WhitelistStatusChanged) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get status(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class ERC1155__getCreatorsResultValue0Struct extends ethereum.Tuple {
  get account(): Address {
    return this[0].toAddress();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }
}

export class ERC1155 extends ethereum.SmartContract {
  static bind(address: Address): ERC1155 {
    return new ERC1155("ERC1155", address);
  }

  balanceOf(account: Address, id: BigInt): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address, id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfBatch(accounts: Array<Address>, ids: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_balanceOfBatch(
    accounts: Array<Address>,
    ids: Array<BigInt>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  baseURI(): string {
    let result = super.call("baseURI", "baseURI():(string)", []);

    return result[0].toString();
  }

  try_baseURI(): ethereum.CallResult<string> {
    let result = super.tryCall("baseURI", "baseURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  contractURI(): string {
    let result = super.call("contractURI", "contractURI():(string)", []);

    return result[0].toString();
  }

  try_contractURI(): ethereum.CallResult<string> {
    let result = super.tryCall("contractURI", "contractURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getCreators(_id: BigInt): Array<ERC1155__getCreatorsResultValue0Struct> {
    let result = super.call(
      "getCreators",
      "getCreators(uint256):((address,uint96)[])",
      [ethereum.Value.fromUnsignedBigInt(_id)]
    );

    return result[0].toTupleArray<ERC1155__getCreatorsResultValue0Struct>();
  }

  try_getCreators(
    _id: BigInt
  ): ethereum.CallResult<Array<ERC1155__getCreatorsResultValue0Struct>> {
    let result = super.tryCall(
      "getCreators",
      "getCreators(uint256):((address,uint96)[])",
      [ethereum.Value.fromUnsignedBigInt(_id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<ERC1155__getCreatorsResultValue0Struct>()
    );
  }

  getFeeBps(id: BigInt): Array<BigInt> {
    let result = super.call("getFeeBps", "getFeeBps(uint256):(uint256[])", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toBigIntArray();
  }

  try_getFeeBps(id: BigInt): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall("getFeeBps", "getFeeBps(uint256):(uint256[])", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getFeeRecipients(id: BigInt): Array<Address> {
    let result = super.call(
      "getFeeRecipients",
      "getFeeRecipients(uint256):(address[])",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );

    return result[0].toAddressArray();
  }

  try_getFeeRecipients(id: BigInt): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getFeeRecipients",
      "getFeeRecipients(uint256):(address[])",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  isApprovedForAll(_owner: Address, _operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromAddress(_operator)
      ]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    _owner: Address,
    _operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromAddress(_operator)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isWhitelist(account: Address): boolean {
    let result = super.call("isWhitelist", "isWhitelist(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_isWhitelist(account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isWhitelist", "isWhitelist(address):(bool)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  uri(id: BigInt): string {
    let result = super.call("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toString();
  }

  try_uri(id: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class __ERC1155MadNftUser_initCall extends ethereum.Call {
  get inputs(): __ERC1155MadNftUser_initCall__Inputs {
    return new __ERC1155MadNftUser_initCall__Inputs(this);
  }

  get outputs(): __ERC1155MadNftUser_initCall__Outputs {
    return new __ERC1155MadNftUser_initCall__Outputs(this);
  }
}

export class __ERC1155MadNftUser_initCall__Inputs {
  _call: __ERC1155MadNftUser_initCall;

  constructor(call: __ERC1155MadNftUser_initCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get baseURI(): string {
    return this._call.inputValues[2].value.toString();
  }

  get contractURI(): string {
    return this._call.inputValues[3].value.toString();
  }

  get operators(): Array<Address> {
    return this._call.inputValues[4].value.toAddressArray();
  }

  get transferProxy(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get lazyTransferProxy(): Address {
    return this._call.inputValues[6].value.toAddress();
  }
}

export class __ERC1155MadNftUser_initCall__Outputs {
  _call: __ERC1155MadNftUser_initCall;

  constructor(call: __ERC1155MadNftUser_initCall) {
    this._call = call;
  }
}

export class __ERC1155MadNft_initCall extends ethereum.Call {
  get inputs(): __ERC1155MadNft_initCall__Inputs {
    return new __ERC1155MadNft_initCall__Inputs(this);
  }

  get outputs(): __ERC1155MadNft_initCall__Outputs {
    return new __ERC1155MadNft_initCall__Outputs(this);
  }
}

export class __ERC1155MadNft_initCall__Inputs {
  _call: __ERC1155MadNft_initCall;

  constructor(call: __ERC1155MadNft_initCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get baseURI(): string {
    return this._call.inputValues[2].value.toString();
  }

  get contractURI(): string {
    return this._call.inputValues[3].value.toString();
  }

  get transferProxy(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get lazyTransferProxy(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class __ERC1155MadNft_initCall__Outputs {
  _call: __ERC1155MadNft_initCall;

  constructor(call: __ERC1155MadNft_initCall) {
    this._call = call;
  }
}

export class AddWhitelistCall extends ethereum.Call {
  get inputs(): AddWhitelistCall__Inputs {
    return new AddWhitelistCall__Inputs(this);
  }

  get outputs(): AddWhitelistCall__Outputs {
    return new AddWhitelistCall__Outputs(this);
  }
}

export class AddWhitelistCall__Inputs {
  _call: AddWhitelistCall;

  constructor(call: AddWhitelistCall) {
    this._call = call;
  }

  get _users(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class AddWhitelistCall__Outputs {
  _call: AddWhitelistCall;

  constructor(call: AddWhitelistCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class BurnBatchCall extends ethereum.Call {
  get inputs(): BurnBatchCall__Inputs {
    return new BurnBatchCall__Inputs(this);
  }

  get outputs(): BurnBatchCall__Outputs {
    return new BurnBatchCall__Outputs(this);
  }
}

export class BurnBatchCall__Inputs {
  _call: BurnBatchCall;

  constructor(call: BurnBatchCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class BurnBatchCall__Outputs {
  _call: BurnBatchCall;

  constructor(call: BurnBatchCall) {
    this._call = call;
  }
}

export class MintAndTransferCall extends ethereum.Call {
  get inputs(): MintAndTransferCall__Inputs {
    return new MintAndTransferCall__Inputs(this);
  }

  get outputs(): MintAndTransferCall__Outputs {
    return new MintAndTransferCall__Outputs(this);
  }
}

export class MintAndTransferCall__Inputs {
  _call: MintAndTransferCall;

  constructor(call: MintAndTransferCall) {
    this._call = call;
  }

  get data(): MintAndTransferCallDataStruct {
    return changetype<MintAndTransferCallDataStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class MintAndTransferCall__Outputs {
  _call: MintAndTransferCall;

  constructor(call: MintAndTransferCall) {
    this._call = call;
  }
}

export class MintAndTransferCallDataStruct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get tokenURI(): string {
    return this[1].toString();
  }

  get supply(): BigInt {
    return this[2].toBigInt();
  }

  get creators(): Array<MintAndTransferCallDataCreatorsStruct> {
    return this[3].toTupleArray<MintAndTransferCallDataCreatorsStruct>();
  }

  get royalties(): Array<MintAndTransferCallDataRoyaltiesStruct> {
    return this[4].toTupleArray<MintAndTransferCallDataRoyaltiesStruct>();
  }

  get signatures(): Array<Bytes> {
    return this[5].toBytesArray();
  }
}

export class MintAndTransferCallDataCreatorsStruct extends ethereum.Tuple {
  get account(): Address {
    return this[0].toAddress();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }
}

export class MintAndTransferCallDataRoyaltiesStruct extends ethereum.Tuple {
  get account(): Address {
    return this[0].toAddress();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }
}

export class RemoveWhitelistCall extends ethereum.Call {
  get inputs(): RemoveWhitelistCall__Inputs {
    return new RemoveWhitelistCall__Inputs(this);
  }

  get outputs(): RemoveWhitelistCall__Outputs {
    return new RemoveWhitelistCall__Outputs(this);
  }
}

export class RemoveWhitelistCall__Inputs {
  _call: RemoveWhitelistCall;

  constructor(call: RemoveWhitelistCall) {
    this._call = call;
  }

  get _users(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class RemoveWhitelistCall__Outputs {
  _call: RemoveWhitelistCall;

  constructor(call: RemoveWhitelistCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SafeBatchTransferFromCall extends ethereum.Call {
  get inputs(): SafeBatchTransferFromCall__Inputs {
    return new SafeBatchTransferFromCall__Inputs(this);
  }

  get outputs(): SafeBatchTransferFromCall__Outputs {
    return new SafeBatchTransferFromCall__Outputs(this);
  }
}

export class SafeBatchTransferFromCall__Inputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeBatchTransferFromCall__Outputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetBaseURICall extends ethereum.Call {
  get inputs(): SetBaseURICall__Inputs {
    return new SetBaseURICall__Inputs(this);
  }

  get outputs(): SetBaseURICall__Outputs {
    return new SetBaseURICall__Outputs(this);
  }
}

export class SetBaseURICall__Inputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }

  get newBaseURI(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetBaseURICall__Outputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }
}

export class TransferFromOrMintCall extends ethereum.Call {
  get inputs(): TransferFromOrMintCall__Inputs {
    return new TransferFromOrMintCall__Inputs(this);
  }

  get outputs(): TransferFromOrMintCall__Outputs {
    return new TransferFromOrMintCall__Outputs(this);
  }
}

export class TransferFromOrMintCall__Inputs {
  _call: TransferFromOrMintCall;

  constructor(call: TransferFromOrMintCall) {
    this._call = call;
  }

  get data(): TransferFromOrMintCallDataStruct {
    return changetype<TransferFromOrMintCallDataStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class TransferFromOrMintCall__Outputs {
  _call: TransferFromOrMintCall;

  constructor(call: TransferFromOrMintCall) {
    this._call = call;
  }
}

export class TransferFromOrMintCallDataStruct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get tokenURI(): string {
    return this[1].toString();
  }

  get supply(): BigInt {
    return this[2].toBigInt();
  }

  get creators(): Array<TransferFromOrMintCallDataCreatorsStruct> {
    return this[3].toTupleArray<TransferFromOrMintCallDataCreatorsStruct>();
  }

  get royalties(): Array<TransferFromOrMintCallDataRoyaltiesStruct> {
    return this[4].toTupleArray<TransferFromOrMintCallDataRoyaltiesStruct>();
  }

  get signatures(): Array<Bytes> {
    return this[5].toBytesArray();
  }
}

export class TransferFromOrMintCallDataCreatorsStruct extends ethereum.Tuple {
  get account(): Address {
    return this[0].toAddress();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }
}

export class TransferFromOrMintCallDataRoyaltiesStruct extends ethereum.Tuple {
  get account(): Address {
    return this[0].toAddress();
  }

  get value(): BigInt {
    return this[1].toBigInt();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateAccountCall extends ethereum.Call {
  get inputs(): UpdateAccountCall__Inputs {
    return new UpdateAccountCall__Inputs(this);
  }

  get outputs(): UpdateAccountCall__Outputs {
    return new UpdateAccountCall__Outputs(this);
  }
}

export class UpdateAccountCall__Inputs {
  _call: UpdateAccountCall;

  constructor(call: UpdateAccountCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _from(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class UpdateAccountCall__Outputs {
  _call: UpdateAccountCall;

  constructor(call: UpdateAccountCall) {
    this._call = call;
  }
}
